{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11602633,"sourceType":"datasetVersion","datasetId":7276958},{"sourceId":11613421,"sourceType":"datasetVersion","datasetId":7284710}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:19:21.127183Z","iopub.execute_input":"2025-05-07T17:19:21.127679Z","iopub.status.idle":"2025-05-07T17:19:24.022181Z","shell.execute_reply.started":"2025-05-07T17:19:21.127643Z","shell.execute_reply":"2025-05-07T17:19:24.020736Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/influencercont/brands_df_final.csv\n/kaggle/input/influencercont/influencers_df_final.csv\n/kaggle/input/influencercont/mlpr.csv\n/kaggle/input/brands/brands_data.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Step 1: Load the data\nbrands_df = pd.read_csv('/kaggle/input/influencercont/brands_df_final.csv')\ninfluencers_df = pd.read_csv('/kaggle/input/influencercont/influencers_df_final.csv')\nmlpr = pd.read_csv('/kaggle/input/influencercont/mlpr.csv')\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:19:24.024320Z","iopub.execute_input":"2025-05-07T17:19:24.025189Z","iopub.status.idle":"2025-05-07T17:19:25.255631Z","shell.execute_reply.started":"2025-05-07T17:19:24.025159Z","shell.execute_reply":"2025-05-07T17:19:25.254434Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"brand= pd.read_csv('/kaggle/input/brands/brands_data.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:19:25.260234Z","iopub.execute_input":"2025-05-07T17:19:25.260592Z","iopub.status.idle":"2025-05-07T17:19:25.997861Z","shell.execute_reply.started":"2025-05-07T17:19:25.260562Z","shell.execute_reply":"2025-05-07T17:19:25.996178Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/4065972476.py:1: DtypeWarning: Columns (3,4,5,6,7,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  brand= pd.read_csv('/kaggle/input/brands/brands_data.csv')\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"sponsorship_pairs = set(\n    zip(\n        mlpr['sponsor_user_username'].dropna().str.lower(),    # Brand usernames\n        mlpr['User'].dropna().str.lower()                      # Influencer usernames\n    )\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:19:26.001732Z","iopub.execute_input":"2025-05-07T17:19:26.002108Z","iopub.status.idle":"2025-05-07T17:19:26.039510Z","shell.execute_reply.started":"2025-05-07T17:19:26.002082Z","shell.execute_reply":"2025-05-07T17:19:26.037957Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ndef is_sponsored(brand_username, influencer_username):\n    if pd.isna(brand_username) or pd.isna(influencer_username):\n        return 0\n    return 1 if (brand_username.lower(), influencer_username.lower()) in sponsorship_pairs else 0\n\n# Step 4: Create final list of rows\nfinal_rows = []\n\n# How many random non-sponsored influencers you want to sample per brand\nn_non_sponsored_per_brand = 10\n\n# Iterate over each brand\nfor idx, brand_row in brands_df.iterrows():\n    brand_username = brand_row['Brand Username']\n    \n    # Find all influencers sponsored by this brand\n    sponsored_influencers = mlpr[\n        mlpr['sponsor_user_username'].str.lower() == str(brand_username).lower()\n    ]['User'].dropna().unique()\n    \n    # Sponsored influencers (sponsorship_final = 1)\n    for influencer_username in sponsored_influencers:\n        influencer_info = influencers_df[influencers_df['User'].str.lower() == influencer_username.lower()]\n        \n        if not influencer_info.empty:\n            row = {\n                'Brand Username': brand_username,\n                'Brand Bio': brand_row.get('Bio', np.nan),\n                'Brand Category': brand_row.get('Brand Category', np.nan),\n                'Influencer Username': influencer_username,\n                'Influencer Name': influencer_info.iloc[0].get('Influencer Name', np.nan),\n                'Influencer Category': influencer_info.iloc[0].get('Influencer Category', np.nan),\n                'Influencer Bio': influencer_info.iloc[0].get('Bio', np.nan),\n                'Influencer Followers': influencer_info.iloc[0].get('Followers', np.nan),\n                'Influencer Engagement Rate': influencer_info.iloc[0].get('Engagement Rate', np.nan),\n                'sponsorship_final': 1\n            }\n            final_rows.append(row)\n\n    # Non-sponsored influencers with non-null Bio\n    all_influencers_set = set(\n        influencers_df[~influencers_df['Bio'].isna()]['User'].dropna().str.lower()\n    )\n    sponsored_set = set(map(str.lower, sponsored_influencers))\n    non_sponsored_influencers = list(all_influencers_set - sponsored_set)\n    \n    if len(non_sponsored_influencers) >= n_non_sponsored_per_brand:\n        sampled_non_sponsored = np.random.choice(non_sponsored_influencers, n_non_sponsored_per_brand, replace=False)\n    else:\n        sampled_non_sponsored = non_sponsored_influencers\n\n    for influencer_username in sampled_non_sponsored:\n        influencer_info = influencers_df[influencers_df['User'].str.lower() == influencer_username]\n        \n        if not influencer_info.empty:\n            row = {\n                'Brand Username': brand_username,\n                'Brand Bio': brand_row.get('Bio', np.nan),\n                'Brand Category': brand_row.get('Brand Category', np.nan),\n                'Influencer Username': influencer_info.iloc[0]['User'],\n                'Influencer Name': influencer_info.iloc[0].get('Influencer Name', np.nan),\n                'Influencer Category': influencer_info.iloc[0].get('Influencer Category', np.nan),\n                'Influencer Bio': influencer_info.iloc[0].get('Bio', np.nan),\n                'Influencer Followers': influencer_info.iloc[0].get('Followers', np.nan),\n                'Influencer Engagement Rate': influencer_info.iloc[0].get('Engagement Rate', np.nan),\n                'sponsorship_final': 0\n            }\n            final_rows.append(row)\n\n# Step 5: Create the final dataframe\nfinal_df = pd.DataFrame(final_rows)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:19:26.040865Z","iopub.execute_input":"2025-05-07T17:19:26.041175Z","iopub.status.idle":"2025-05-07T17:25:49.682520Z","shell.execute_reply.started":"2025-05-07T17:19:26.041150Z","shell.execute_reply":"2025-05-07T17:25:49.681482Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport pandas as pd\nimport numpy as np\n\n# Fill NaNs\nfinal_df['Brand Bio'] = final_df['Brand Bio'].fillna('')\nfinal_df['Influencer Bio'] = final_df['Influencer Bio'].fillna('')\n\n# Load a pre-trained sentence transformer model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')  # Lightweight and fast\n\n# Encode bios\nbrand_embeddings = model.encode(final_df['Brand Bio'].tolist(), show_progress_bar=True)\ninfluencer_embeddings = model.encode(final_df['Influencer Bio'].tolist(), show_progress_bar=True)\n\n# Compute cosine similarity row-wise\nsimilarities = [\n    cosine_similarity([brand_embeddings[i]], [influencer_embeddings[i]])[0][0]\n    for i in range(len(final_df))\n]\n\n# Add similarity to dataframe\nfinal_df['bio_similarity'] = similarities\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:25:49.683868Z","iopub.execute_input":"2025-05-07T17:25:49.684202Z","iopub.status.idle":"2025-05-07T17:33:23.039476Z","shell.execute_reply.started":"2025-05-07T17:25:49.684173Z","shell.execute_reply":"2025-05-07T17:33:23.038133Z"}},"outputs":[{"name":"stderr","text":"2025-05-07 17:26:10.428541: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1746638770.734398      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1746638770.853338      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3551b407fe104c248bf0374144aa89f7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"635ce4118d9e44278dc8ce744d671b4c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8576846e86624152b0572b7202a22d1d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"baf43cabe32b45d9a44c20fa1aef625c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f2b57c4c9ce642ce88806dc63b25701e"}},"metadata":{}},{"name":"stderr","text":"Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7382f943581347a9bea3196c41576705"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c9d9f6a33da84b24860ab026bb08531c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c1bbb84c197429287f105f41d15bcdd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cc7fe94a01e748718302c1e340a4feb4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"54d087f3402b4d529713ff34d4caa971"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8a120a7c737d4329a86c11ee3723b7a1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/712 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7b85a6c7215d473682b34599117540e7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/712 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f84b45a73672450995eb600b004a6467"}},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"final_df[final_df['sponsorship_final'] == 1][['Brand Bio', 'Influencer Bio','bio_similarity']]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.040723Z","iopub.execute_input":"2025-05-07T17:33:23.041083Z","iopub.status.idle":"2025-05-07T17:33:23.087106Z","shell.execute_reply.started":"2025-05-07T17:33:23.041052Z","shell.execute_reply":"2025-05-07T17:33:23.085823Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"                                               Brand Bio  \\\n0      Celebrating how delicious, organic herbal teas...   \n1      Celebrating how delicious, organic herbal teas...   \n12             Air and Space Power to Protect our Nation   \n13             Air and Space Power to Protect our Nation   \n24                   #ThisIsAnn Shop our Instagram feed:   \n...                                                  ...   \n22724           @theellenfund  @ellentube  @theellenshop   \n22735  Download the LIKEtoKNOW.it app now to Shop You...   \n22736  Download the LIKEtoKNOW.it app now to Shop You...   \n22747           Revealing You. Revealing Beautiful Skin.   \n22748           Revealing You. Revealing Beautiful Skin.   \n\n                                          Influencer Bio  bio_similarity  \n0      I can't dance but I can burpee 🖥 Digital Ed @W...        0.268495  \n1      🇬🇧 Lifestyle Vlogger 📕 Author of Eat Smart 🍓 C...        0.334331  \n12      Love Island 2017 Management: Jadeen@Johnnoel.com        0.016247  \n13     London Boohoo ambassador Hello@84World.com    ...        0.080258  \n24                     Boston, MA // Will travel for 🍜🍣🍦        0.109824  \n...                                                  ...             ...  \n22724  confident curves & sassy style. 💋 a body posit...        0.168464  \n22735  Somewhere between Lisa Bonet & Zoe Kravitz co-...        0.151144  \n22736  confident curves & sassy style. 💋 a body posit...        0.156597  \n22747  🇫🇷🇮🇷French/Persian. Esthetician. Blogger. 📍San...        0.190185  \n22748  confident curves & sassy style. 💋 a body posit...        0.379533  \n\n[3779 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand Bio</th>\n      <th>Influencer Bio</th>\n      <th>bio_similarity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>I can't dance but I can burpee 🖥 Digital Ed @W...</td>\n      <td>0.268495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>🇬🇧 Lifestyle Vlogger 📕 Author of Eat Smart 🍓 C...</td>\n      <td>0.334331</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Love Island 2017 Management: Jadeen@Johnnoel.com</td>\n      <td>0.016247</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>London Boohoo ambassador Hello@84World.com    ...</td>\n      <td>0.080258</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>#ThisIsAnn Shop our Instagram feed:</td>\n      <td>Boston, MA // Will travel for 🍜🍣🍦</td>\n      <td>0.109824</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>22724</th>\n      <td>@theellenfund  @ellentube  @theellenshop</td>\n      <td>confident curves &amp; sassy style. 💋 a body posit...</td>\n      <td>0.168464</td>\n    </tr>\n    <tr>\n      <th>22735</th>\n      <td>Download the LIKEtoKNOW.it app now to Shop You...</td>\n      <td>Somewhere between Lisa Bonet &amp; Zoe Kravitz co-...</td>\n      <td>0.151144</td>\n    </tr>\n    <tr>\n      <th>22736</th>\n      <td>Download the LIKEtoKNOW.it app now to Shop You...</td>\n      <td>confident curves &amp; sassy style. 💋 a body posit...</td>\n      <td>0.156597</td>\n    </tr>\n    <tr>\n      <th>22747</th>\n      <td>Revealing You. Revealing Beautiful Skin.</td>\n      <td>🇫🇷🇮🇷French/Persian. Esthetician. Blogger. 📍San...</td>\n      <td>0.190185</td>\n    </tr>\n    <tr>\n      <th>22748</th>\n      <td>Revealing You. Revealing Beautiful Skin.</td>\n      <td>confident curves &amp; sassy style. 💋 a body posit...</td>\n      <td>0.379533</td>\n    </tr>\n  </tbody>\n</table>\n<p>3779 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"final_df.loc[final_df['bio_similarity'] > 0.45, 'sponsorship_final'] = 1\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.088274Z","iopub.execute_input":"2025-05-07T17:33:23.089509Z","iopub.status.idle":"2025-05-07T17:33:23.095487Z","shell.execute_reply.started":"2025-05-07T17:33:23.089435Z","shell.execute_reply":"2025-05-07T17:33:23.094499Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"final_df[final_df['bio_similarity'] >0.45][['Brand Bio', 'Influencer Bio','bio_similarity','sponsorship_final']].head(100)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.096469Z","iopub.execute_input":"2025-05-07T17:33:23.096768Z","iopub.status.idle":"2025-05-07T17:33:23.140013Z","shell.execute_reply.started":"2025-05-07T17:33:23.096747Z","shell.execute_reply":"2025-05-07T17:33:23.138873Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                               Brand Bio  \\\n52     Mom•Model•Activist Founder of @nowrongwaymovem...   \n59     Mom•Model•Activist Founder of @nowrongwaymovem...   \n156    💌 Express shipping worldwide ⚡️ Pay later // A...   \n189    Award Winning Makeup / Beauty Brand 💫 Our Luxu...   \n202    Find Yourself at River Island Our Style. Your ...   \n...                                                  ...   \n9954        For the love of fashion. Shop our Instagram:   \n9973   Beachwear and More 👙 Made in italy For info an...   \n9976   Beachwear and More 👙 Made in italy For info an...   \n10030  🤳tag us + #revolveme to show off your ‘fit   💄...   \n10033  🤳tag us + #revolveme to show off your ‘fit   💄...   \n\n                                          Influencer Bio  bio_similarity  \\\n52     Creative spirit ✨ Co-founder & ECD @refinery29...        0.469690   \n59     Jen - mom of 5 - blended family. #ColorfulHapp...        0.451450   \n156    🍒🍒🍒 🐣twitter:@chloemorello 📥kevin@renegade-mgm...        0.477622   \n189    Wifey💍Mummy❤️ Ireland📍  Sharing Fashion, Beaut...        0.586366   \n202    Fashion | Interiors | Photography  📷 #stylestr...        0.468936   \n...                                                  ...             ...   \n9954   Modifying fashion to the modest level 📍Mumbai,...        0.619752   \n9973   Collaborations ✉️ info@alexandrarabbitte.com S...        0.521049   \n9976   @smmakeupstore  ♡ YouTuber Beauty | Fashion | ...        0.457655   \n10030  #happymims Spreading some positive vibes here ...        0.473290   \n10033  (fashion traveler) model from 🇧🇷 to the 🌎 ♐️🌸🦄...        0.488949   \n\n       sponsorship_final  \n52                     1  \n59                     1  \n156                    1  \n189                    1  \n202                    1  \n...                  ...  \n9954                   1  \n9973                   1  \n9976                   1  \n10030                  1  \n10033                  1  \n\n[100 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand Bio</th>\n      <th>Influencer Bio</th>\n      <th>bio_similarity</th>\n      <th>sponsorship_final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>52</th>\n      <td>Mom•Model•Activist Founder of @nowrongwaymovem...</td>\n      <td>Creative spirit ✨ Co-founder &amp; ECD @refinery29...</td>\n      <td>0.469690</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>Mom•Model•Activist Founder of @nowrongwaymovem...</td>\n      <td>Jen - mom of 5 - blended family. #ColorfulHapp...</td>\n      <td>0.451450</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>💌 Express shipping worldwide ⚡️ Pay later // A...</td>\n      <td>🍒🍒🍒 🐣twitter:@chloemorello 📥kevin@renegade-mgm...</td>\n      <td>0.477622</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>Award Winning Makeup / Beauty Brand 💫 Our Luxu...</td>\n      <td>Wifey💍Mummy❤️ Ireland📍  Sharing Fashion, Beaut...</td>\n      <td>0.586366</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>202</th>\n      <td>Find Yourself at River Island Our Style. Your ...</td>\n      <td>Fashion | Interiors | Photography  📷 #stylestr...</td>\n      <td>0.468936</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9954</th>\n      <td>For the love of fashion. Shop our Instagram:</td>\n      <td>Modifying fashion to the modest level 📍Mumbai,...</td>\n      <td>0.619752</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9973</th>\n      <td>Beachwear and More 👙 Made in italy For info an...</td>\n      <td>Collaborations ✉️ info@alexandrarabbitte.com S...</td>\n      <td>0.521049</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9976</th>\n      <td>Beachwear and More 👙 Made in italy For info an...</td>\n      <td>@smmakeupstore  ♡ YouTuber Beauty | Fashion | ...</td>\n      <td>0.457655</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10030</th>\n      <td>🤳tag us + #revolveme to show off your ‘fit   💄...</td>\n      <td>#happymims Spreading some positive vibes here ...</td>\n      <td>0.473290</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10033</th>\n      <td>🤳tag us + #revolveme to show off your ‘fit   💄...</td>\n      <td>(fashion traveler) model from 🇧🇷 to the 🌎 ♐️🌸🦄...</td>\n      <td>0.488949</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"final_df = pd.merge(\n    final_df,\n    brands_df[['Brand Username', 'Brand Name']],\n    on='Brand Username',\n    how='left'\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.141707Z","iopub.execute_input":"2025-05-07T17:33:23.142094Z","iopub.status.idle":"2025-05-07T17:33:23.212365Z","shell.execute_reply.started":"2025-05-07T17:33:23.142069Z","shell.execute_reply":"2025-05-07T17:33:23.211301Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Merge Followers from brand into final_df by matching brand.name to final_df['Brand Name']\nfinal_df = pd.merge(\n    final_df,\n    brand[['Name', 'Followers']].rename(columns={'Name': 'Brand Name'}),\n    on='Brand Name',\n    how='left',\n    suffixes=('', '_from_brand_df')  # Optional, in case of duplicates\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.214288Z","iopub.execute_input":"2025-05-07T17:33:23.214608Z","iopub.status.idle":"2025-05-07T17:33:23.271487Z","shell.execute_reply.started":"2025-05-07T17:33:23.214586Z","shell.execute_reply":"2025-05-07T17:33:23.270540Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"final_df[\"Influencer Username\"].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:44:15.128100Z","iopub.execute_input":"2025-05-07T17:44:15.128407Z","iopub.status.idle":"2025-05-07T17:44:15.145126Z","shell.execute_reply.started":"2025-05-07T17:44:15.128386Z","shell.execute_reply":"2025-05-07T17:44:15.143930Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"15689"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"final_df[\"Brand Username\"].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:44:37.423162Z","iopub.execute_input":"2025-05-07T17:44:37.423496Z","iopub.status.idle":"2025-05-07T17:44:37.431406Z","shell.execute_reply.started":"2025-05-07T17:44:37.423472Z","shell.execute_reply":"2025-05-07T17:44:37.430381Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"1597"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"final_df.head(20)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.272867Z","iopub.execute_input":"2025-05-07T17:33:23.273153Z","iopub.status.idle":"2025-05-07T17:33:23.301090Z","shell.execute_reply.started":"2025-05-07T17:33:23.273131Z","shell.execute_reply":"2025-05-07T17:33:23.299976Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   Brand Username                                          Brand Bio  \\\n0      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n1      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n2      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n3      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n4      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n5      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n6      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n7      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n8      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n9      pukkaherbs  Celebrating how delicious, organic herbal teas...   \n10     pukkaherbs  Celebrating how delicious, organic herbal teas...   \n11     pukkaherbs  Celebrating how delicious, organic herbal teas...   \n12       disneyuk          Air and Space Power to Protect our Nation   \n13       disneyuk          Air and Space Power to Protect our Nation   \n14       disneyuk          Air and Space Power to Protect our Nation   \n15       disneyuk          Air and Space Power to Protect our Nation   \n16       disneyuk          Air and Space Power to Protect our Nation   \n17       disneyuk          Air and Space Power to Protect our Nation   \n18       disneyuk          Air and Space Power to Protect our Nation   \n19       disneyuk          Air and Space Power to Protect our Nation   \n\n                            Brand Category   Influencer Username  \\\n0             Grocery & Convenience Stores           wellness_ed   \n1             Grocery & Convenience Stores            niomismart   \n2             Grocery & Convenience Stores         mariamobregon   \n3             Grocery & Convenience Stores             revlon_ru   \n4             Grocery & Convenience Stores        apetogentleman   \n5             Grocery & Convenience Stores        selfxplanatori   \n6             Grocery & Convenience Stores           steve__0811   \n7             Grocery & Convenience Stores          erniespotted   \n8             Grocery & Convenience Stores           guavaseason   \n9             Grocery & Convenience Stores           jake_dalton   \n10            Grocery & Convenience Stores           vikkiimoran   \n11            Grocery & Convenience Stores              jucsilva   \n12  Transportation & Accomodation Services        camillathurlow   \n13  Transportation & Accomodation Services        camillathurlow   \n14  Transportation & Accomodation Services           kazcrossley   \n15  Transportation & Accomodation Services           kazcrossley   \n16  Transportation & Accomodation Services  jess.lifeloveliberty   \n17  Transportation & Accomodation Services  jess.lifeloveliberty   \n18  Transportation & Accomodation Services            tylerbarks   \n19  Transportation & Accomodation Services            tylerbarks   \n\n        Influencer Name                    Influencer Category  \\\n0         Amy Hopkinson                             Publishers   \n1           Niomi Smart                                    NaN   \n2        Mariam Obregón                 Creators & Celebrities   \n3                Revlon                  Food & Personal Goods   \n4      Ape to Gentleman                             Publishers   \n5             TORI SUNG                 Creators & Celebrities   \n6                 Steve                 Creators & Celebrities   \n7                 Ernie                 Creators & Celebrities   \n8               Guayaba                 Creators & Celebrities   \n9           Jake Dalton                 Creators & Celebrities   \n10       VICTORIA MORÁN                 Creators & Celebrities   \n11     Ju | Joana Silva                 Creators & Celebrities   \n12      Camilla Thurlow                                    NaN   \n13      Camilla Thurlow                                    NaN   \n14                  Kaz                 Creators & Celebrities   \n15                  Kaz                 Creators & Celebrities   \n16  Jessica Christensen  Non-Profits & Religious Organizations   \n17  Jessica Christensen  Non-Profits & Religious Organizations   \n18          Tyler Barks                 Creators & Celebrities   \n19          Tyler Barks                 Creators & Celebrities   \n\n                                       Influencer Bio  Influencer Followers  \\\n0   I can't dance but I can burpee 🖥 Digital Ed @W...               46736.0   \n1   🇬🇧 Lifestyle Vlogger 📕 Author of Eat Smart 🍓 C...             1685570.0   \n2                                                   🤮              563161.0   \n3   #ЖивиДерзко с Revlon! Подписывайся на наш офиц...               30136.0   \n4   The online evolution of a traditional men’s ma...               33685.0   \n5   ✨Lifestyle Blogger.  ⚖️ JD/MBA Student. 💌 self...               10202.0   \n6   📍Karlsruhe ||📧contact:steve.federlechner@iclou...               10032.0   \n7   🐶 5-year-old #Dalmatian 📍 Spotted around Bosto...               11230.0   \n8   🌺 🐊 PNW. Gordita. Musician. Any pronouns. A li...                6937.0   \n9   👰🏼Amazing wife @kayyyno 🇺🇸 2 X Olympic Gymnast...              303888.0   \n10  ★Lover of airplanes, soccer, clothes, & roofto...                3441.0   \n11  💫 #wanderlust & #beautylover  💌 joanacssilva@g...                8267.0   \n12   Love Island 2017 Management: Jadeen@Johnnoel.com             1471030.0   \n13   Love Island 2017 Management: Jadeen@Johnnoel.com             1471030.0   \n14  London Boohoo ambassador Hello@84World.com    ...             1208313.0   \n15  London Boohoo ambassador Hello@84World.com    ...             1208313.0   \n16  #BlessedMom👧🏻👧🏼👶🏻 /#😍💍👨🏻‍⚕️👨🏻‍🎓📚/#MSW👩🏻‍🎓📚 /#E...               11357.0   \n17  #BlessedMom👧🏻👧🏼👶🏻 /#😍💍👨🏻‍⚕️👨🏻‍🎓📚/#MSW👩🏻‍🎓📚 /#E...               11357.0   \n18  Traveling Photographer and Videographer Sharin...               32436.0   \n19  Traveling Photographer and Videographer Sharin...               32436.0   \n\n    Influencer Engagement Rate  sponsorship_final  bio_similarity  \\\n0                     1.076717                  1        0.268495   \n1                     0.421798                  1        0.334331   \n2                          NaN                  0        0.168799   \n3                     5.322538                  0        0.199620   \n4                          NaN                  0        0.142804   \n5                    34.035810                  0        0.168043   \n6                          NaN                  0        0.069490   \n7                    27.912734                  0        0.176599   \n8                    16.596992                  0        0.178563   \n9                     0.856275                  0        0.155023   \n10                         NaN                  0        0.136938   \n11                   36.519585                  0        0.183176   \n12                    0.980546                  1        0.016247   \n13                    0.980546                  1        0.016247   \n14                    0.592318                  1        0.080258   \n15                    0.592318                  1        0.080258   \n16                   14.012225                  0        0.055993   \n17                   14.012225                  0        0.055993   \n18                         NaN                  0        0.043137   \n19                         NaN                  0        0.043137   \n\n         Brand Name  Followers  \n0       Pukka Herbs    61353.0  \n1       Pukka Herbs    61353.0  \n2       Pukka Herbs    61353.0  \n3       Pukka Herbs    61353.0  \n4       Pukka Herbs    61353.0  \n5       Pukka Herbs    61353.0  \n6       Pukka Herbs    61353.0  \n7       Pukka Herbs    61353.0  \n8       Pukka Herbs    61353.0  \n9       Pukka Herbs    61353.0  \n10      Pukka Herbs    61353.0  \n11      Pukka Herbs    61353.0  \n12  Royal Air Force   143182.0  \n13  Camilla Thurlow        NaN  \n14  Royal Air Force   143182.0  \n15  Camilla Thurlow        NaN  \n16  Royal Air Force   143182.0  \n17  Camilla Thurlow        NaN  \n18  Royal Air Force   143182.0  \n19  Camilla Thurlow        NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand Username</th>\n      <th>Brand Bio</th>\n      <th>Brand Category</th>\n      <th>Influencer Username</th>\n      <th>Influencer Name</th>\n      <th>Influencer Category</th>\n      <th>Influencer Bio</th>\n      <th>Influencer Followers</th>\n      <th>Influencer Engagement Rate</th>\n      <th>sponsorship_final</th>\n      <th>bio_similarity</th>\n      <th>Brand Name</th>\n      <th>Followers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>wellness_ed</td>\n      <td>Amy Hopkinson</td>\n      <td>Publishers</td>\n      <td>I can't dance but I can burpee 🖥 Digital Ed @W...</td>\n      <td>46736.0</td>\n      <td>1.076717</td>\n      <td>1</td>\n      <td>0.268495</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>niomismart</td>\n      <td>Niomi Smart</td>\n      <td>NaN</td>\n      <td>🇬🇧 Lifestyle Vlogger 📕 Author of Eat Smart 🍓 C...</td>\n      <td>1685570.0</td>\n      <td>0.421798</td>\n      <td>1</td>\n      <td>0.334331</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>mariamobregon</td>\n      <td>Mariam Obregón</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>🤮</td>\n      <td>563161.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.168799</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>revlon_ru</td>\n      <td>Revlon</td>\n      <td>Food &amp; Personal Goods</td>\n      <td>#ЖивиДерзко с Revlon! Подписывайся на наш офиц...</td>\n      <td>30136.0</td>\n      <td>5.322538</td>\n      <td>0</td>\n      <td>0.199620</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>apetogentleman</td>\n      <td>Ape to Gentleman</td>\n      <td>Publishers</td>\n      <td>The online evolution of a traditional men’s ma...</td>\n      <td>33685.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.142804</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>selfxplanatori</td>\n      <td>TORI SUNG</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>✨Lifestyle Blogger.  ⚖️ JD/MBA Student. 💌 self...</td>\n      <td>10202.0</td>\n      <td>34.035810</td>\n      <td>0</td>\n      <td>0.168043</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>steve__0811</td>\n      <td>Steve</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>📍Karlsruhe ||📧contact:steve.federlechner@iclou...</td>\n      <td>10032.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.069490</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>erniespotted</td>\n      <td>Ernie</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>🐶 5-year-old #Dalmatian 📍 Spotted around Bosto...</td>\n      <td>11230.0</td>\n      <td>27.912734</td>\n      <td>0</td>\n      <td>0.176599</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>guavaseason</td>\n      <td>Guayaba</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>🌺 🐊 PNW. Gordita. Musician. Any pronouns. A li...</td>\n      <td>6937.0</td>\n      <td>16.596992</td>\n      <td>0</td>\n      <td>0.178563</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>jake_dalton</td>\n      <td>Jake Dalton</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>👰🏼Amazing wife @kayyyno 🇺🇸 2 X Olympic Gymnast...</td>\n      <td>303888.0</td>\n      <td>0.856275</td>\n      <td>0</td>\n      <td>0.155023</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>vikkiimoran</td>\n      <td>VICTORIA MORÁN</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>★Lover of airplanes, soccer, clothes, &amp; roofto...</td>\n      <td>3441.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.136938</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>pukkaherbs</td>\n      <td>Celebrating how delicious, organic herbal teas...</td>\n      <td>Grocery &amp; Convenience Stores</td>\n      <td>jucsilva</td>\n      <td>Ju | Joana Silva</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>💫 #wanderlust &amp; #beautylover  💌 joanacssilva@g...</td>\n      <td>8267.0</td>\n      <td>36.519585</td>\n      <td>0</td>\n      <td>0.183176</td>\n      <td>Pukka Herbs</td>\n      <td>61353.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>camillathurlow</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n      <td>Love Island 2017 Management: Jadeen@Johnnoel.com</td>\n      <td>1471030.0</td>\n      <td>0.980546</td>\n      <td>1</td>\n      <td>0.016247</td>\n      <td>Royal Air Force</td>\n      <td>143182.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>camillathurlow</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n      <td>Love Island 2017 Management: Jadeen@Johnnoel.com</td>\n      <td>1471030.0</td>\n      <td>0.980546</td>\n      <td>1</td>\n      <td>0.016247</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>kazcrossley</td>\n      <td>Kaz</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>London Boohoo ambassador Hello@84World.com    ...</td>\n      <td>1208313.0</td>\n      <td>0.592318</td>\n      <td>1</td>\n      <td>0.080258</td>\n      <td>Royal Air Force</td>\n      <td>143182.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>kazcrossley</td>\n      <td>Kaz</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>London Boohoo ambassador Hello@84World.com    ...</td>\n      <td>1208313.0</td>\n      <td>0.592318</td>\n      <td>1</td>\n      <td>0.080258</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>jess.lifeloveliberty</td>\n      <td>Jessica Christensen</td>\n      <td>Non-Profits &amp; Religious Organizations</td>\n      <td>#BlessedMom👧🏻👧🏼👶🏻 /#😍💍👨🏻‍⚕️👨🏻‍🎓📚/#MSW👩🏻‍🎓📚 /#E...</td>\n      <td>11357.0</td>\n      <td>14.012225</td>\n      <td>0</td>\n      <td>0.055993</td>\n      <td>Royal Air Force</td>\n      <td>143182.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>jess.lifeloveliberty</td>\n      <td>Jessica Christensen</td>\n      <td>Non-Profits &amp; Religious Organizations</td>\n      <td>#BlessedMom👧🏻👧🏼👶🏻 /#😍💍👨🏻‍⚕️👨🏻‍🎓📚/#MSW👩🏻‍🎓📚 /#E...</td>\n      <td>11357.0</td>\n      <td>14.012225</td>\n      <td>0</td>\n      <td>0.055993</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>tylerbarks</td>\n      <td>Tyler Barks</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>Traveling Photographer and Videographer Sharin...</td>\n      <td>32436.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.043137</td>\n      <td>Royal Air Force</td>\n      <td>143182.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>disneyuk</td>\n      <td>Air and Space Power to Protect our Nation</td>\n      <td>Transportation &amp; Accomodation Services</td>\n      <td>tylerbarks</td>\n      <td>Tyler Barks</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>Traveling Photographer and Videographer Sharin...</td>\n      <td>32436.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0.043137</td>\n      <td>Camilla Thurlow</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# Display the total number of NaN values in the entire DataFrame\nfinal_df.isna().sum().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.305076Z","iopub.execute_input":"2025-05-07T17:33:23.305376Z","iopub.status.idle":"2025-05-07T17:33:23.339651Z","shell.execute_reply.started":"2025-05-07T17:33:23.305356Z","shell.execute_reply":"2025-05-07T17:33:23.338585Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"30129"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"final_df['Influencer Engagement Rate'] = final_df['Influencer Engagement Rate'].fillna(final_df['Influencer Engagement Rate'].mean())\n\nfinal_df['Followers'] = final_df['Followers'].fillna(final_df['Followers'].mean())\n# Fill categorical columns\nfinal_df['Influencer Category'] = final_df['Influencer Category'].fillna('Unknown')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.340615Z","iopub.execute_input":"2025-05-07T17:33:23.340891Z","iopub.status.idle":"2025-05-07T17:33:23.354700Z","shell.execute_reply.started":"2025-05-07T17:33:23.340870Z","shell.execute_reply":"2025-05-07T17:33:23.353673Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Display the total number of NaN values in the entire DataFrame\nfinal_df.isna().sum().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:23.355738Z","iopub.execute_input":"2025-05-07T17:33:23.356025Z","iopub.status.idle":"2025-05-07T17:33:23.393844Z","shell.execute_reply.started":"2025-05-07T17:33:23.356003Z","shell.execute_reply":"2025-05-07T17:33:23.393051Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"284"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n# === 1. Prepare the features and target ===\nfeatures = [\n    'bio_similarity',\n    'Influencer Followers',\n    'Influencer Engagement Rate',\n    'Followers',                  # This is 'Brand Followers' (renamed)\n    'Brand Category',\n    'Influencer Category'\n    \n]\n\ntarget = 'sponsorship_final'\ncat_features = ['Brand Category', 'Influencer Category']\n\n# === 2. Train-Test Split ===\nX = final_df[features]\ny = final_df[target]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# === 3. Handle Missing Data for Categorical Features ===\nX_train['Brand Category'] = X_train['Brand Category'].fillna('Unknown').astype(str)\nX_train['Influencer Category'] = X_train['Influencer Category'].fillna('Unknown').astype(str)\n\nX_test['Brand Category'] = X_test['Brand Category'].fillna('Unknown').astype(str)\nX_test['Influencer Category'] = X_test['Influencer Category'].fillna('Unknown').astype(str)\n\n# === 4. Scale Numeric Features ===\nscaler = StandardScaler()\nnumeric_features = ['Influencer Followers', 'Influencer Engagement Rate', 'Followers']\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\n\n# === 5. Initialize CatBoost Model ===\nmodel = CatBoostClassifier(\n    iterations=500,\n    learning_rate=0.1,\n    depth=6,\n    random_state=42,\n    verbose=100\n)\n\n# === 6. Train the Model ===\nmodel.fit(X_train[features], y_train, cat_features=cat_features)\n\n# === 7. Save the Trained Model ===\nmodel.save_model('catboost_model.cbm')\n\n# === 8. Evaluate the Model ===\ny_pred = model.predict(X_test[features])\n\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n\ncm = confusion_matrix(y_test, y_pred)\n\n# Extract TP and FP only (model predicted 1)\ntp = cm[1, 1]  # Predicted 1, actual 1\nfp = cm[0, 1]  # Predicted 1, actual 0\n\nsponsored_focus_cm = [[tp, fp]]\nprint(\"Confusion for predicted 'sponsored' only:\\n\", sponsored_focus_cm)\nfrom sklearn.metrics import balanced_accuracy_score\nbalanced_acc = balanced_accuracy_score(y_test, y_pred)\nprint(f\"Balanced Accuracy Score: {balanced_acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:09:45.625152Z","iopub.execute_input":"2025-05-07T18:09:45.625606Z","iopub.status.idle":"2025-05-07T18:09:57.831355Z","shell.execute_reply.started":"2025-05-07T18:09:45.625572Z","shell.execute_reply":"2025-05-07T18:09:57.829878Z"}},"outputs":[{"name":"stdout","text":"0:\tlearn: 0.5726677\ttotal: 22.6ms\tremaining: 11.3s\n100:\tlearn: 0.2309037\ttotal: 2.3s\tremaining: 9.08s\n200:\tlearn: 0.2021056\ttotal: 4.41s\tremaining: 6.56s\n300:\tlearn: 0.1844385\ttotal: 6.78s\tremaining: 4.48s\n400:\tlearn: 0.1694221\ttotal: 9.7s\tremaining: 2.4s\n499:\tlearn: 0.1581303\ttotal: 11.9s\tremaining: 0us\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.95      0.94      0.95      5929\n           1       0.81      0.84      0.82      1718\n\n    accuracy                           0.92      7647\n   macro avg       0.88      0.89      0.89      7647\nweighted avg       0.92      0.92      0.92      7647\n\nConfusion Matrix:\n [[5590  339]\n [ 275 1443]]\nConfusion for predicted 'sponsored' only:\n [[1443, 339]]\nBalanced Accuracy Score: 0.8914\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# === 9. Plot Feature Importances ===\nimportances = model.get_feature_importance()\nfeature_names = features\n\n# Create a DataFrame for easier plotting\nfeat_imp_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n}).sort_values(by='Importance', ascending=False)\n\n# Plot\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Importance', y='Feature', data=feat_imp_df, palette='viridis')\nplt.title('Feature Importances from CatBoost')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:09:59.490221Z","iopub.execute_input":"2025-05-07T18:09:59.490644Z","iopub.status.idle":"2025-05-07T18:09:59.718692Z","shell.execute_reply.started":"2025-05-07T18:09:59.490614Z","shell.execute_reply":"2025-05-07T18:09:59.717766Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom catboost import CatBoostClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# === 1. Load your trained CatBoost model ===\nmodel = CatBoostClassifier()\nmodel.load_model('catboost_model.cbm')\n\n# === 2. Input brand details ===\nbrand_bio = \"interior furniture\"\nbrand_category = \"furniture\"\nbrand_followers = 5000\n\n# === 3. Prepare influencer DataFrame ===\ninfluencers_df['Bio'] = influencers_df['Bio'].fillna(\"\")\ninfluencers_df['Influencer Category'] = influencers_df['Influencer Category'].fillna('Unknown').astype(str)\ninfluencers_df['Followers'] = influencers_df['Followers'].fillna(0)\ninfluencers_df['Engagement Rate'] = influencers_df['Engagement Rate'].fillna(0)\n\n# === 4. Compute TF-IDF bio similarity ===\nall_bios = [brand_bio] + influencers_df['Bio'].tolist()\ntfidf = TfidfVectorizer(stop_words='english', max_features=5000)\ntfidf_matrix = tfidf.fit_transform(all_bios)\n\nbrand_vec = tfidf_matrix[0]\ninfluencer_vecs = tfidf_matrix[1:]\n\nsimilarities = cosine_similarity(brand_vec, influencer_vecs).flatten()\ninfluencers_df['bio_similarity'] = similarities\n\n# === 5. Build DataFrame for prediction ===\nrecommendation_df = pd.DataFrame({\n    'Brand Category': [brand_category] * len(influencers_df),\n    'Influencer Category': influencers_df['Influencer Category'],\n    'Influencer Followers': influencers_df['Followers'],\n    'Influencer Engagement Rate': influencers_df['Engagement Rate'],\n    'Followers': [brand_followers] * len(influencers_df),  # Brand followers\n    'bio_similarity': influencers_df['bio_similarity']\n})\n\n# === 6. Scale numeric features (using training logic) ===\nscaler = StandardScaler()\nnumeric_features = ['Influencer Followers', 'Influencer Engagement Rate', 'Followers']\nrecommendation_df[numeric_features] = scaler.fit_transform(recommendation_df[numeric_features])\n\n# === 7. Predict using CatBoost ===\nfeatures = [\n    'bio_similarity',\n    'Influencer Followers',\n    'Influencer Engagement Rate',\n    'Followers',\n    'Brand Category',\n    'Influencer Category'\n]\n\ncat_features = ['Brand Category', 'Influencer Category']\n\nrecommendation_df['sponsorship_prob'] = model.predict_proba(recommendation_df[features])[:, 1]\nrecommendation_df['Influencer Username'] = influencers_df['User']  # Adjust if column name differs\n# === 8. Recommend Top 3 ===\n\n\n# Now print the desired columns with the unscaled 'Influencer Followers'\nprint(top_3[['Influencer Username', 'Influencer Category', 'sponsorship_prob', 'bio_similarity', 'Influencer Engagement Rate','Influencer Followers']])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:23:09.166946Z","iopub.execute_input":"2025-05-07T18:23:09.167263Z","iopub.status.idle":"2025-05-07T18:23:10.345152Z","shell.execute_reply.started":"2025-05-07T18:23:09.167242Z","shell.execute_reply":"2025-05-07T18:23:10.344054Z"}},"outputs":[{"name":"stdout","text":"      Influencer Username Influencer Category  sponsorship_prob  \\\n17615     im_faultierwald             Unknown          0.987680   \n37495         ryansaghian             Unknown          0.984940   \n17623           yakusha24             Unknown          0.975618   \n8997      shepelfurniture   Home Goods Stores          0.939116   \n35242     thediydecorator       Home Services          0.863479   \n\n       bio_similarity  Influencer Engagement Rate  Influencer Followers  \n17615        0.541799                   -0.201002             -0.096719  \n37495        0.691722                   -0.201002             -0.033882  \n17623        0.627774                    0.180741             -0.100378  \n8997         0.531065                   -0.201002             -0.099694  \n35242        0.000000                   -0.136385             -0.049752  \n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"recommendation_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:26:12.449165Z","iopub.execute_input":"2025-05-07T18:26:12.449503Z","iopub.status.idle":"2025-05-07T18:26:12.463674Z","shell.execute_reply.started":"2025-05-07T18:26:12.449475Z","shell.execute_reply":"2025-05-07T18:26:12.462573Z"}},"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"  Brand Category     Influencer Category  Influencer Followers  \\\n0      furniture  Creators & Celebrities             -0.083339   \n1      furniture              Publishers             -0.100124   \n2      furniture                 Unknown             -0.100620   \n3      furniture  Creators & Celebrities             -0.043729   \n4      furniture                 Unknown             -0.100111   \n\n   Influencer Engagement Rate  Followers  bio_similarity  sponsorship_prob  \\\n0                   -0.125511        0.0             0.0          0.176506   \n1                   -0.201002        0.0             0.0          0.174162   \n2                    0.287132        0.0             0.0          0.027254   \n3                   -0.116103        0.0             0.0          0.314896   \n4                   -0.201002        0.0             0.0          0.295533   \n\n       Influencer Username  \n0   silviatodoloquemellama  \n1  peppermintandgrapefruit  \n2           rachelclindsay  \n3      jaquelinesantosblog  \n4           skincarebysean  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand Category</th>\n      <th>Influencer Category</th>\n      <th>Influencer Followers</th>\n      <th>Influencer Engagement Rate</th>\n      <th>Followers</th>\n      <th>bio_similarity</th>\n      <th>sponsorship_prob</th>\n      <th>Influencer Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>furniture</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>-0.083339</td>\n      <td>-0.125511</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.176506</td>\n      <td>silviatodoloquemellama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>furniture</td>\n      <td>Publishers</td>\n      <td>-0.100124</td>\n      <td>-0.201002</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.174162</td>\n      <td>peppermintandgrapefruit</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>furniture</td>\n      <td>Unknown</td>\n      <td>-0.100620</td>\n      <td>0.287132</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.027254</td>\n      <td>rachelclindsay</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>furniture</td>\n      <td>Creators &amp; Celebrities</td>\n      <td>-0.043729</td>\n      <td>-0.116103</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.314896</td>\n      <td>jaquelinesantosblog</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>furniture</td>\n      <td>Unknown</td>\n      <td>-0.100111</td>\n      <td>-0.201002</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.295533</td>\n      <td>skincarebysean</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":62},{"cell_type":"code","source":"# Fill missing categorical values\nfinal_df['Brand Category'] = final_df['Brand Category'].fillna('Unknown').astype(str)\nfinal_df['Influencer Category'] = final_df['Influencer Category'].fillna('Unknown').astype(str)\nfinal_df['sponsorship_prob'] = model.predict_proba(final_df[features])[:, 1]\ndef calculate_mrr(df, brand_col='Brand Name', target_col='sponsorship_final', prob_col='sponsorship_prob'):\n    mrr_list = []\n\n    for brand, group in df.groupby(brand_col):\n        # Sort influencers for this brand by predicted sponsorship probability\n        group_sorted = group.sort_values(by=prob_col, ascending=False).reset_index(drop=True)\n\n        # Find the rank of the first actual sponsored influencer (target == 1)\n        for rank, row in group_sorted.iterrows():\n            if row[target_col] == 1:\n                mrr_list.append(1.0 / (rank + 1))\n                break\n        else:\n            mrr_list.append(0.0)  # No sponsored influencer found\n\n    return sum(mrr_list) / len(mrr_list)\nmrr_score = calculate_mrr(final_df)\nprint(\"MRR Score:\", mrr_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T17:33:37.460014Z","iopub.execute_input":"2025-05-07T17:33:37.460261Z","iopub.status.idle":"2025-05-07T17:33:39.230246Z","shell.execute_reply.started":"2025-05-07T17:33:37.460243Z","shell.execute_reply":"2025-05-07T17:33:39.228996Z"}},"outputs":[{"name":"stdout","text":"MRR Score: 0.4302285059427212\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"def recall_at_k(group, k):\n    top_k = group.sort_values('sponsorship_final', ascending=False).head(k)\n    total_relevant = group['sponsorship_final'].sum()\n    return top_k['sponsorship_final'].sum() / total_relevant if total_relevant != 0 else np.nan\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:26:58.668430Z","iopub.execute_input":"2025-05-07T18:26:58.668772Z","iopub.status.idle":"2025-05-07T18:26:58.674139Z","shell.execute_reply.started":"2025-05-07T18:26:58.668750Z","shell.execute_reply":"2025-05-07T18:26:58.673011Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"k = 3\nrecall_scores = final_df.groupby('Brand Username').apply(lambda x: recall_at_k(x, k))\noverall_recall_at_k = recall_scores.mean()\nprint(f\"Overall Recall@{k}: {overall_recall_at_k:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:27:00.394776Z","iopub.execute_input":"2025-05-07T18:27:00.395092Z","iopub.status.idle":"2025-05-07T18:27:01.397797Z","shell.execute_reply.started":"2025-05-07T18:27:00.395071Z","shell.execute_reply":"2025-05-07T18:27:01.395609Z"}},"outputs":[{"name":"stdout","text":"Overall Recall@3: 0.8898\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_31/4029725990.py:2: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  recall_scores = final_df.groupby('Brand Username').apply(lambda x: recall_at_k(x, k))\n","output_type":"stream"}],"execution_count":64},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}